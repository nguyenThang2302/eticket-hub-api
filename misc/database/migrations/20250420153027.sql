-- Create "users" table
CREATE TABLE `users` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the user", `name` varchar(255) NOT NULL COMMENT "Full name of the user", `avatar_url` varchar(255) NOT NULL COMMENT "URL of the user's avatar", `email` varchar(255) NOT NULL COMMENT "Email address of the user", `password` varchar(255) NULL COMMENT "Password of the user", `is_verified` bool NOT NULL DEFAULT 0 COMMENT "Flag indicating if the user is verified", `role` varchar(16) NOT NULL DEFAULT "USER" COMMENT "Role of the user (USER, ADMIN, PROMOTER, VENUE)", `provider` varchar(10) NOT NULL DEFAULT "LOCAL" COMMENT "Provider of the user (SYSTEM, GOOGLE, FACEBOOK)", `sex` varchar(10) NULL COMMENT "Sex of the user (male, female)", `date_of_birth` date NULL COMMENT "Date of birth of the user", `phone_number` varchar(10) NULL COMMENT "Phone number of the user", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the user was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the user was last updated", `created_by` varchar(255) NULL COMMENT "Identifier of the user who created this user", `updated_by` varchar(255) NULL COMMENT "Identifier of the user who last updated this user", PRIMARY KEY (`id`), UNIQUE INDEX `idx_users_email` (`email`)) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing user information";
-- Create "seats" table
CREATE TABLE `seats` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the seat", `row` varchar(255) NULL COMMENT "Row identifier for the seat", `label` varchar(255) NULL COMMENT "Label for the seat", `type` varchar(255) NULL COMMENT "Type of the seat (e.g., VIP, Regular)", `status` varchar(10) NULL COMMENT "Status of the seat (e.g., available, booked)", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the seat was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the seat was last updated", `deleted_at` datetime NULL COMMENT "Timestamp when the seat was deleted", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the seat", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the seat", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the seat", PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing seat information";
-- Create "access_tokens" table
CREATE TABLE `access_tokens` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the access token", `expired_at` datetime NOT NULL COMMENT "Expiration date of the access token", `user_id` varchar(16) NOT NULL COMMENT "Foreign key referencing the user associated with the access token", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the access token was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the access token was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the record.", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the record.", PRIMARY KEY (`id`), INDEX `fk_access_tokens_users` (`user_id`), CONSTRAINT `fk_access_tokens_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE NO ACTION ON DELETE CASCADE) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing access tokens";
-- Create "languages" table
CREATE TABLE `languages` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the language", `code` varchar(5) NOT NULL COMMENT "Language code (e.g., en, fr, es)", `name` varchar(20) NOT NULL COMMENT "Language name", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the language was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the language was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the language", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the language", PRIMARY KEY (`id`), UNIQUE INDEX `idx_languages_code` (`code`)) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing language information";
-- Create "categories" table
CREATE TABLE `categories` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the category", `name` varchar(255) NOT NULL COMMENT "Name of the category", `lang_code` varchar(5) NULL COMMENT "Language code associated with the category", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the category was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the category was last updated", `deleted_at` datetime NULL COMMENT "Timestamp when the category was deleted", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the category", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the category", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the category", PRIMARY KEY (`id`), INDEX `fk_categories_languages` (`lang_code`), CONSTRAINT `fk_categories_languages` FOREIGN KEY (`lang_code`) REFERENCES `languages` (`code`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing category information";
-- Create "coupons" table
CREATE TABLE `coupons` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the coupon", `code` varchar(7) NOT NULL COMMENT "Unique code for the coupon", `percent` double NULL COMMENT "Discount percentage of the coupon", `amount` int NULL COMMENT "Discount amount of the coupon", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the coupon was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the coupon was last updated", `deleted_at` datetime NULL COMMENT "Timestamp when the coupon was deleted", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the coupon", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the coupon", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the coupon", PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing coupon information";
-- Create "organizations" table
CREATE TABLE `organizations` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the organization", `lang_code` varchar(5) NOT NULL COMMENT "Language code associated with the organization", `name` varchar(255) NOT NULL COMMENT "Name of the organization", `description` varchar(255) NULL COMMENT "Description of the organization", `is_active` bool NOT NULL DEFAULT 1 COMMENT "Flag indicating if the organization is active", `status` varchar(10) NULL COMMENT "Status of the organization", `logo_url` varchar(255) NULL COMMENT "URL of the organization's logo", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the organization was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the organization was last updated", `deleted_at` datetime NULL COMMENT "Timestamp when the organization was deleted", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the organization", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the organization", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the organization", PRIMARY KEY (`id`), INDEX `fk_organizations_languages` (`lang_code`), CONSTRAINT `fk_organizations_languages` FOREIGN KEY (`lang_code`) REFERENCES `languages` (`code`) ON UPDATE NO ACTION ON DELETE NO ACTION) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing organization information";
-- Create "venues" table
CREATE TABLE `venues` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the venue", `lang_code` varchar(5) NULL COMMENT "Language code associated with the venue", `name` varchar(255) NOT NULL COMMENT "Name of the venue", `address` varchar(255) NULL COMMENT "Address of the venue", `description` varchar(255) NULL COMMENT "Description of the venue", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the venue was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the venue was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the venue", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the venue", `deleted_at` datetime NULL COMMENT "Timestamp when the organization was deleted", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the organization", PRIMARY KEY (`id`), INDEX `fk_venues_languages` (`lang_code`), CONSTRAINT `fk_venues_languages` FOREIGN KEY (`lang_code`) REFERENCES `languages` (`code`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing venue information";
-- Create "events" table
CREATE TABLE `events` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the event", `organization_id` varchar(16) NULL COMMENT "Identifier of the organization associated with the event", `venue_id` varchar(16) NULL COMMENT "Identifier of the venue associated with the event", `category_id` varchar(16) NULL COMMENT "Identifier of the category associated with the event", `lang_code` varchar(5) NULL COMMENT "Language code associated with the event", `name` varchar(255) NOT NULL COMMENT "Name of the event", `description` text NULL COMMENT "Description of the event", `logo_url` varchar(255) NULL COMMENT "URL of the event's logo", `poster_url` varchar(255) NULL COMMENT "URL of the event's poster", `start_datetime` datetime NOT NULL COMMENT "Start date and time of the event", `status` varchar(10) NULL COMMENT "Status of the event", `allow_scan_ticket` bool NOT NULL DEFAULT 0 COMMENT "Flag indicating if ticket scanning is allowed", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the event was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the event was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the event", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the event", `deleted_at` datetime NULL COMMENT "Timestamp when the organization was deleted", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the organization", PRIMARY KEY (`id`), INDEX `fk_events_categories` (`category_id`), INDEX `fk_events_languages` (`lang_code`), INDEX `fk_events_organizations` (`organization_id`), INDEX `fk_events_venues` (`venue_id`), CONSTRAINT `fk_events_categories` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_events_languages` FOREIGN KEY (`lang_code`) REFERENCES `languages` (`code`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_events_organizations` FOREIGN KEY (`organization_id`) REFERENCES `organizations` (`id`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_events_venues` FOREIGN KEY (`venue_id`) REFERENCES `venues` (`id`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing event information";
-- Create "event_coupons" table
CREATE TABLE `event_coupons` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the event-coupon relationship", `event_id` varchar(16) NOT NULL COMMENT "Identifier of the event", `coupon_id` varchar(16) NOT NULL COMMENT "Identifier of the coupon", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the relationship was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the relationship was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the relationship", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the relationship", PRIMARY KEY (`id`), INDEX `fk_event_coupons_coupons` (`coupon_id`), INDEX `fk_event_coupons_events` (`event_id`), CONSTRAINT `fk_event_coupons_coupons` FOREIGN KEY (`coupon_id`) REFERENCES `coupons` (`id`) ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT `fk_event_coupons_events` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON UPDATE CASCADE ON DELETE CASCADE) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for associating events with coupons";
-- Create "tickets" table
CREATE TABLE `tickets` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the ticket", `lang_code` varchar(5) NULL COMMENT "Language code associated with the ticket", `name` varchar(255) NOT NULL COMMENT "Name of the ticket", `price` bigint NOT NULL COMMENT "Price of the ticket", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the ticket was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the ticket was last updated", `deleted_at` datetime NULL COMMENT "Timestamp when the ticket was deleted", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the ticket", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the ticket", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the ticket", PRIMARY KEY (`id`), INDEX `fk_tickets_languages` (`lang_code`), CONSTRAINT `fk_tickets_languages` FOREIGN KEY (`lang_code`) REFERENCES `languages` (`code`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing ticket information";
-- Create "event_seats" table
CREATE TABLE `event_seats` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the event seat", `event_id` varchar(16) NULL COMMENT "Identifier of the event associated with the seat", `ticket_id` varchar(16) NULL COMMENT "Identifier of the ticket associated with the seat", `row` varchar(255) NULL COMMENT "Row identifier for the seat", `label` varchar(255) NULL COMMENT "Label for the seat", `type` varchar(255) NULL COMMENT "Type of the seat (e.g., VIP, Regular)", `status` varchar(10) NULL COMMENT "Status of the seat (e.g., available, booked)", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the event seat was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the event seat was last updated", `deleted_at` datetime NULL COMMENT "Timestamp when the event seat was deleted", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the event seat", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the event seat", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the event seat", PRIMARY KEY (`id`), INDEX `fk_event_seats_events` (`event_id`), INDEX `fk_event_seats_tickets` (`ticket_id`), CONSTRAINT `fk_event_seats_events` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_event_seats_tickets` FOREIGN KEY (`ticket_id`) REFERENCES `tickets` (`id`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing event seat information";
-- Create "groups" table
CREATE TABLE `groups` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the group", `user_id` varchar(16) NOT NULL COMMENT "Identifier of the user associated with the group", `is_owner` bool NOT NULL DEFAULT 0 COMMENT "Flag indicating if the user is the owner of the group", `organization_id` varchar(16) NOT NULL COMMENT "Identifier of the organization associated with the group", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the language was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the language was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the language", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the language", PRIMARY KEY (`id`), INDEX `fk_groups_organizations` (`organization_id`), INDEX `fk_groups_users` (`user_id`), CONSTRAINT `fk_groups_organizations` FOREIGN KEY (`organization_id`) REFERENCES `organizations` (`id`) ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT `fk_groups_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE CASCADE ON DELETE CASCADE) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing group information";
-- Create "payment_methods" table
CREATE TABLE `payment_methods` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the payment method", `name` varchar(10) NOT NULL COMMENT "Name of the payment method", `logo_url` varchar(255) NULL COMMENT "URL of the payment method's logo", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the payment method was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the payment method was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the payment method", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the payment method", `deleted_at` datetime NULL COMMENT "Timestamp when the payment method was deleted", `deleted_by` varchar(16) NULL COMMENT "Identifier of the user who deleted the payment method", PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing payment method information";
-- Create "receive_infos" table
CREATE TABLE `receive_infos` (`id` varchar(16) NOT NULL COMMENT "Primary key for the receive_infos table", `name` varchar(255) NULL COMMENT "Name of the receiver", `phone_number` varchar(10) NULL COMMENT "Phone number of the receiver", `email` varchar(255) NULL COMMENT "Email address of the receiver", `created_at` datetime NULL COMMENT "Timestamp when the record was created", `updated_at` datetime NULL COMMENT "Timestamp when the record was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the record", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the record", PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing receiver information";
-- Create "orders" table
CREATE TABLE `orders` (`id` varchar(16) NOT NULL COMMENT "Primary key for the orders table", `event_id` varchar(16) NULL COMMENT "Foreign key referencing the event associated with the order", `user_id` varchar(16) NULL COMMENT "Foreign key referencing the user who placed the order", `payment_method_id` varchar(16) NULL COMMENT "Foreign key referencing the payment method used for the order", `receive_info_id` varchar(16) NULL COMMENT "Foreign key referencing the receiver information for the order", `coupon_id` varchar(16) NULL COMMENT "Foreign key referencing the coupon applied to the order", `discount_price` double NULL COMMENT "Discount price applied to the order", `sub_total_price` double NULL COMMENT "Subtotal price before discounts", `total_price` double NULL COMMENT "Total price after discounts", `status` varchar(20) NULL COMMENT "Status of the order (e.g., pending, completed, canceled)", `seat_info` text NULL COMMENT "Information about the seats associated with the order", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the order was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the order was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the order", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the order", PRIMARY KEY (`id`), INDEX `fk_orders_coupons` (`coupon_id`), INDEX `fk_orders_events` (`event_id`), INDEX `fk_orders_payment_methods` (`payment_method_id`), INDEX `fk_orders_receive_infos` (`receive_info_id`), INDEX `fk_orders_users` (`user_id`), CONSTRAINT `fk_orders_coupons` FOREIGN KEY (`coupon_id`) REFERENCES `coupons` (`id`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_orders_events` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_orders_payment_methods` FOREIGN KEY (`payment_method_id`) REFERENCES `payment_methods` (`id`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_orders_receive_infos` FOREIGN KEY (`receive_info_id`) REFERENCES `receive_infos` (`id`) ON UPDATE CASCADE ON DELETE SET NULL, CONSTRAINT `fk_orders_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing order information";
-- Create "order_ticket_images" table
CREATE TABLE `order_ticket_images` (`id` varchar(16) NOT NULL COMMENT "Primary key for the order_ticket_images table", `order_id` varchar(16) NULL COMMENT "Foreign key referencing the order associated with the ticket image", `code` varchar(16) NULL COMMENT "Unique code for the ticket image", `ticket_name` varchar(255) NULL COMMENT "Name of the ticket", `seat_location` varchar(255) NULL COMMENT "Location of the seat associated with the ticket", `qr_ticket_url` varchar(255) NULL COMMENT "URL of the QR code for the ticket", `price` bigint NULL COMMENT "Price of the ticket", `is_scanned` bool NULL COMMENT "Flag indicating if the ticket has been scanned", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the ticket image was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the ticket image was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the ticket image", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the ticket image", PRIMARY KEY (`id`), INDEX `fk_order_ticket_images_orders` (`order_id`), CONSTRAINT `fk_order_ticket_images_orders` FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing ticket images associated with orders";
-- Create "payment_orders" table
CREATE TABLE `payment_orders` (`id` varchar(16) NOT NULL COMMENT "Primary key for the payment_orders table", `order_id` varchar(16) NULL COMMENT "Foreign key referencing the order associated with the payment order", `payment_order_id` varchar(255) NULL COMMENT "Identifier for the payment order", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the payment order was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the payment order was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the payment order", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the payment order", PRIMARY KEY (`id`), INDEX `fk_payment_orders_orders` (`order_id`), CONSTRAINT `fk_payment_orders_orders` FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`) ON UPDATE CASCADE ON DELETE SET NULL) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing payment order information";
-- Create "refresh_tokens" table
CREATE TABLE `refresh_tokens` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the refresh token", `expired_at` datetime NOT NULL COMMENT "Expiration date of the refresh token", `user_id` varchar(16) NOT NULL COMMENT "Foreign key referencing the user associated with the refresh token", `access_token_id` varchar(16) NULL COMMENT "Foreign key referencing the access token associated with the refresh token", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the refresh token was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the refresh token was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the record.", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the record.", INDEX `fk_refresh_tokens_users` (`user_id`), UNIQUE INDEX `idx_refresh_tokens_access_token_id` (`access_token_id`), CONSTRAINT `fk_refresh_tokens_access_tokens` FOREIGN KEY (`access_token_id`) REFERENCES `access_tokens` (`id`) ON UPDATE NO ACTION ON DELETE SET NULL, CONSTRAINT `fk_refresh_tokens_users` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON UPDATE NO ACTION ON DELETE CASCADE) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for storing refresh tokens";
-- Create "ticket_events" table
CREATE TABLE `ticket_events` (`id` varchar(16) NOT NULL COMMENT "Unique identifier for the ticket-event relationship", `event_id` varchar(16) NOT NULL COMMENT "Identifier of the event", `ticket_id` varchar(16) NOT NULL COMMENT "Identifier of the ticket", `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Timestamp when the relationship was created", `updated_at` datetime NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Timestamp when the relationship was last updated", `created_by` varchar(16) NULL COMMENT "Identifier of the user who created the relationship", `updated_by` varchar(16) NULL COMMENT "Identifier of the user who last updated the relationship", PRIMARY KEY (`id`), INDEX `fk_ticket_events_events` (`event_id`), INDEX `fk_ticket_events_tickets` (`ticket_id`), CONSTRAINT `fk_ticket_events_events` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON UPDATE CASCADE ON DELETE CASCADE, CONSTRAINT `fk_ticket_events_tickets` FOREIGN KEY (`ticket_id`) REFERENCES `tickets` (`id`) ON UPDATE CASCADE ON DELETE CASCADE) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci COMMENT "Table for associating tickets with events";
